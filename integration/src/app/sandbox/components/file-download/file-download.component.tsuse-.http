import { Observable } from 'rxjs/Observable';
import { RequestOptions, ResponseContentType, Http, Headers } from '@angular/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { saveAs } from 'file-saver';
import { getFileNameFromResponseContentDisposition, saveFile } from './file-download-helper';

@Component({
  selector: 'file-download',
  templateUrl: './file-download.component.html'
})
export class FileDownloadComponent {

  constructor(private httpClient: HttpClient, private http: Http) { }

  saveFileHttpClient() {
    const txtUrl = 'http://localhost:8080/backendmock/downloadFile/txt?filename=testTxt.txt';
    const pdfUrl = 'http://localhost:8080/backendmock/downloadFile/pdf?filename=testPdf.pdf';
    const xlsxUrl = 'http://localhost:8080/backendmock/downloadFile/xlsx?filename=testXlsx.xlsx';
    const docxUrl = ' http://localhost:8080/backendmock/downloadFile/docx?filename=testDocx.docx';
    const txtFileName = 'testTxt.txt';
    const pdfFileName = 'testPdf.pdf';
    const xlsxFileName = 'testXlsx.xlsx';
    const docxFileName = 'testDocx.docx';

    this.getBlob(docxUrl).subscribe(blob => {
      saveAs(blob, docxFileName);
    });
  }

  getBlob(url: string): Observable<Blob> {
    return this.httpClient
      .get(url, {
        responseType: 'blob'
      });
  }



  saveFile() {
    const headers = new Headers();
    headers.append('Accept', 'text/plain');
    this.http.get('http://localhost:8080/backendmock/downloadFile/txt?filename=testTxt.txt'
      , { headers: headers })
      .toPromise()
      .then(response => this.saveToFileSystem(response));
  }

  private saveToFileSystem(response: any) {
    // const contentDispositionHeader: string = response.headers.get('Content-Disposition');
    // const parts: string[] = contentDispositionHeader.split(';');
    // const fileName = parts[1].split('=')[1];

    const fileName = 'testTxt.txt';
    const blob = new Blob([response._body], { type: 'text/plain' });
    saveAs(blob, fileName);
  }



  saveFile2(propertyId: string, fileId: string) {
    // const url = `${this.config.baseUrl}/properties/${propertyId}/files/${fileId}`;
    const url = 'http://localhost:8080/backendmock/downloadFile/txt?filename=testTxt.txt';
    const options = new RequestOptions({ responseType: ResponseContentType.Blob });

    const headers = new HttpHeaders();
    headers.append('Accept', 'text/plain');
    console.log('in saveFile ...');

    // Process the file downloaded
    this.http.get(url, options).subscribe(res => {
      console.log('in saveFile ..., subscribe.');
      // const fileName = getFileNameFromResponseContentDisposition(res);
      // const contentDispositionHeader: string = res.headers.get('Content-Disposition');
      // const parts: string[] = contentDispositionHeader.split(';');
      // const fileName = parts[1].split('=')[1];
      const fileName = 'testTxt.txt';

      saveFile(res.blob(), fileName);
    });
  }

}
